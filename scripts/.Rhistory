facet_wrap(~ Sub)
SubID = c(1:30)
Sub = unique(AllData_ValidTrials$Sub)
AllSub = cbind(Sub,SubID)
View(AllSub)
Sub = unique(AllData_ValidTrials$Sub)
SubID = c(1:30)
AllSub = cbind(Sub,SubID)
View(AllSub)
AllSub = NULL
AllSub$Sub = unique(AllData_ValidTrials$Sub)
AllSub$SubID = c(1:30)
AllSub = as.data.frame(AllSub)
View(AllSub)
AllData_ValidTrials = left_join(AllData_ValidTrials,AllSub)
PPC = left_join(PPC,AllSub)
ggplot() +
geom_histogram(data = AllData_ValidTrials,  aes(x = RT_Rev, y = ..ncount..)) +
geom_line(data = PPC, stat = "density", aes(x = RT_Rev, y = ..scaled..), size = 1) +
xlab("RT(s)") + ylab("Probability") +
theme(axis.text.y  = element_blank(),
strip.background = element_blank()) +
facet_wrap(~ Sub)
ggplot() +
geom_histogram(data = AllData_ValidTrials,  aes(x = RT_Rev, y = ..ncount..)) +
geom_line(data = PPC, stat = "density", aes(x = RT_Rev, y = ..scaled..), size = 1) +
xlab("RT(s)") + ylab("Probability") +
theme(axis.text.y  = element_blank(),
strip.background = element_blank()) +
facet_wrap(~ SubID)
ggplot() +
geom_histogram(data = AllData_ValidTrials,  aes(x = RT_Rev, y = ..ncount..)) +
geom_line(data = PPC, stat = "density", aes(x = RT_Rev, y = ..scaled..), size = 1) +
xlab("RT(s)") + ylab("Probability") +
theme(axis.text.y  = element_blank()) +
facet_wrap(~ SubID)
ggplot() +
geom_histogram(data = AllData_ValidTrials,  aes(x = RT_Rev, y = ..ncount..)) +
geom_line(data = PPC, stat = "density", aes(x = RT_Rev, y = ..scaled..), size = 1) +
xlab("RT(s)") + ylab("Probability") +
theme(axis.text.y  = element_blank(),
strip.text.x = element_text(size = 12)) +
facet_wrap(~ SubID)
ggplot() +
geom_histogram(data = AllData_ValidTrials,  aes(x = RT_Rev, y = ..ncount..)) +
geom_line(data = PPC, stat = "density", aes(x = RT_Rev, y = ..scaled..), size = 1) +
xlab("RT(s)") + ylab("Probability") +
theme(axis.text.y  = element_blank(),
strip.text.x = element_text(size = 2)) +
facet_wrap(~ SubID)
ggplot() +
geom_histogram(data = AllData_ValidTrials,  aes(x = RT_Rev, y = ..ncount..)) +
geom_line(data = PPC, stat = "density", aes(x = RT_Rev, y = ..scaled..), size = 1) +
xlab("RT(s)") + ylab("Probability") +
theme(axis.text.y  = element_blank(),
strip.text.x = element_text(size = 10)) +
facet_wrap(~ SubID)
ggplot() +
geom_histogram(data = AllData_ValidTrials,  aes(x = RT_Rev, y = ..ncount..)) +
geom_line(data = PPC, stat = "density", aes(x = RT_Rev, y = ..scaled..), size = 1) +
xlab("RT(s)") + ylab("Probability") +
theme(axis.text.y  = element_blank(),
strip.text.x = element_text(margin = margin(2,0,2,0, "cm"))) +
facet_wrap(~ SubID)
ggplot() +
geom_histogram(data = AllData_ValidTrials,  aes(x = RT_Rev, y = ..ncount..)) +
geom_line(data = PPC, stat = "density", aes(x = RT_Rev, y = ..scaled..), size = 1) +
xlab("RT(s)") + ylab("Probability") +
theme(axis.text.y  = element_blank(),
strip.text.x = element_text(margin = margin(0.2,0,0.2,0, "cm"))) +
facet_wrap(~ SubID)
ggplot() +
geom_histogram(data = AllData_ValidTrials,  aes(x = RT_Rev, y = ..ncount..)) +
geom_line(data = PPC, stat = "density", aes(x = RT_Rev, y = ..scaled..), size = 1) +
xlab("RT(s)") + ylab("Probability") +
theme(axis.text.y  = element_blank(),
strip.text.x = element_text(margin = margin(0.1,0,0.1,0, "cm"))) +
facet_wrap(~ SubID)
ggplot() +
geom_histogram(data = AllData_ValidTrials,  aes(x = RT_Rev, y = ..ncount..)) +
geom_line(data = PPC, stat = "density", aes(x = RT_Rev, y = ..scaled..), size = 1) +
xlab("RT(s)") + ylab("Probability") +
theme(axis.text.y  = element_blank(),
strip.text.x = element_text(margin = margin(0.1,0,0.1,0, "cm"), size = 10)) +
facet_wrap(~ SubID)
# Plot one subject
ggplot() +
geom_histogram(data = AllData_ValidTrials,  aes(x = RT_Rev, y = ..ncount..)) +
geom_line(data = PPC, stat = "density", aes(x = RT_Rev, y = ..scaled..), size = 1) +
xlab("RT(s)") + ylab("Probability") +
theme(axis.text.y  = element_blank(),
strip.text.x = element_text(margin = margin(0.15,0,0.15,0, "cm"), size = 12)) +
facet_wrap(~ SubID)
ggplot() +
geom_histogram(data = AllData_ValidTrials,  aes(x = RT_Rev, y = ..ncount..)) +
geom_line(data = PPC, stat = "density", aes(x = RT_Rev, y = ..scaled..), size = 1) +
xlab("RT(s)") + ylab("Probability") +
theme(axis.text.y  = element_blank(),
strip.text.x = element_text(margin = margin(0.15,0,0.15,0, "cm"), size = 12)) +
facet_wrap(~ SubID)
ggplot() +
geom_histogram(data = AllData_ValidTrials,  aes(x = RT_Rev, y = ..ncount..)) +
geom_line(data = PPC, stat = "density", aes(x = RT_Rev, y = ..scaled..), size = 1) +
xlab("RT(s)") + ylab("Probability") +
theme(axis.text.y  = element_blank(),
strip.text.x = element_text(margin = margin(0.1,0,0.1,0, "cm"), size = 10)) +
facet_wrap(~ SubID)
# Clear workspace
rm(list = ls())
# Load helper functions
source('helper_functions.R')
# Import libraries
packages = c("tidyr","dplyr","ggplot2","lme4","lmerTest","Hmisc","car","lmtest","Rarity","cowplot")
ipak(packages)
# Redo long calculations
redo_calc = 1;
## Load in Striatum Betas
featquery_res = read.csv("../data/roi_zstat.csv")
featquery_res$Sub = as.factor(featquery_res$Sub)
## Load in individual subject parameters
full.model.subj_parm = read.csv("../data/model_outputs/subject_parms/simpleFull_subjparms.csv")
# Clear workspace
rm(list = ls())
# Load helper functions
source('helper_functions.R')
# Import libraries
packages = c("tidyr","dplyr","ggplot2","lme4","lmerTest","Hmisc","car","lmtest","Rarity","cowplot")
ipak(packages)
# Redo long calculations
redo_calc = 1;
## Load in Striatum Betas
featquery_res = read.csv("../data/roi_zstat.csv")
featquery_res$Sub = as.factor(featquery_res$Sub)
## Load in individual subject parameters
full.model.subj_parm = read.csv("../data/model_outputs/subject_parms/simpleFull_subjparms.csv")
# Clear workspace
rm(list = ls())
# Load helper functions
source('helper_functions.R')
# Import libraries
packages = c("tidyr","dplyr","ggplot2","lme4","lmerTest","Hmisc","car","lmtest","Rarity","cowplot")
ipak(packages)
# Redo long calculations
redo_calc = 1;
## Load in Striatum Betas
featquery_res = read.csv("../data/roi_zstat.csv")
featquery_res$Sub = as.factor(featquery_res$Sub)
## Load in individual subject parameters
full.model.subj_parm = read.csv("../data/model_outputs/subject_parms/simpleFull_subjparms.csv")
# Read in posterior distribution of each parameter
d0 = read.csv("../../../data/model_outputs/trace_processed/simpleFull_trace_all.csv",header = F)
# Read in posterior distribution of each parameter
d0 = read.csv("../data/model_outputs/trace_processed/simpleFull_trace_all.csv",header = F)
colnames(d0) = c("a","t",
"exp_z_mot","exp_z_int",
"v_bias","v_stim","v_int")
d0$z_int = 1/(1+exp(-d0$exp_z_int))
d0$z_bias = d0$exp_z_mot
d0 = dplyr::select(d0, z_bias, v_bias)
# z_bias
z_95 = quantile(d0$z_bias,0.05)
z_diff = d0$z_bias
z_diff = as.data.frame(z_diff)
plot.z_diff =
ggplot(z_diff,aes(z_diff, y = ..scaled..)) +
geom_density(alpha = 0.2, adjust = 5, size = 0) +
geom_line(stat = "density", adjust = 5, size = 2.5) +
#geom_vline(xintercept = z_95, size = 1) +
geom_vline(xintercept = 0, size = 1, linetype="dashed") +
scale_colour_manual(values=myPalette) +
#ggtitle("z bias") +
theme(legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
axis.text.x  = element_text(size=14,color="black"),
axis.text.y  = element_text(size=14,color="black"),
axis.title.x = element_text(size=14),
axis.title.y = element_text(size=14),
strip.background = element_blank(),
strip.text.x = element_text(face = "bold", size = 15),
plot.title = element_text(hjust = 0.5,face = "bold", size = (15))) +
xlab("z_bias") + ylab("Density") +
coord_cartesian(ylim=c(0, 1.1)) +
scale_y_continuous(breaks=seq(0,1,0.25)) +
scale_x_continuous(breaks=c(0, 0.1, 0.1))
# Shade area
plot_data <- as.data.frame(ggplot_build(plot.z_diff)$data[2])
plot.z_diff = plot.z_diff+
geom_area(data = subset(plot_data, x > 0.001), aes(x=x, y=y-0.02), fill="grey", alpha = 0.8) +
geom_line(stat = "density", adjust = 5, size = 2.5)
# v_bias
v_95 = quantile(d0$v_bias,0.05)
v_diff = d0$v_bias
v_diff = as.data.frame(v_diff)
plot.v_diff =
ggplot(v_diff,aes(v_diff, y = ..scaled..)) +
geom_density(alpha = 0.2, adjust = 5, size = 0) +
geom_line(stat = "density", adjust = 5, size = 2.5) +
# geom_vline(xintercept = v_95, size = 1) +
geom_vline(xintercept = 0, size = 1, linetype="dashed") +
scale_colour_manual(values=myPalette) +
#ggtitle("v bias") +
theme(legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
axis.text.x  = element_text(size=14,color="black"),
axis.text.y  = element_text(size=14,color="black"),
axis.title.x = element_text(size=14),
axis.title.y = element_text(size=14),
strip.background = element_blank(),
strip.text.x = element_text(face = "bold", size = 15),
plot.title = element_text(hjust = 0.5,face = "bold", size = (15))) +
xlab("v_bias") + ylab("Density") +
coord_cartesian(ylim=c(0, 1.1)) +
scale_y_continuous(breaks=seq(0,1,0.25))
# Shade area
plot_data <- as.data.frame(ggplot_build(plot.v_diff)$data[2])
plot.v_diff = plot.v_diff+
geom_area(data = subset(plot_data, x > 0.001), aes(x=x, y=y-0.02), fill="grey", alpha = 0.8) +
geom_line(stat = "density", adjust = 5, size = 2.5)
z_bias = mean(z_diff$z_diff < 0)
cat("P_z(S > F) = ", 1 - z_bias)
v_bias = mean(v_diff$v_diff < 0)
cat("P_v(S > F) = ", 1 - v_bias)
# Clear workspace
rm(list = ls())
# Load helper functions
source('helper_functions.R')
# Import libraries
packages = c("tidyr","dplyr","ggplot2","lme4","lmerTest","Hmisc","car","lmtest","Rarity","cowplot")
ipak(packages)
# Redo long calculations
redo_calc = 0;
# Clear workspace
rm(list = ls())
# Load helper functions
source('helper_functions.R')
# Import libraries
packages = c("tidyr","dplyr","ggplot2","lme4","lmerTest","Hmisc","car","lmtest","Rarity","cowplot")
ipak(packages)
# Redo long calculations
redo_calc = 1;
# Read data
AllData = read.csv("../data/AllData.csv")
# Convert to factors
AllData$Sub = as.factor(AllData$Sub)
AllData$Pred = as.factor(AllData$Pred)
AllData$Want2See = as.factor(AllData$Want2See)
AllData$Con_Rev = factor(AllData$Con, levels = c('Coop','Comp'))
AllData_ValidTrials = filter(AllData, !(is.na(Choice)))
# Load psychometric results (see Fig. 2 code)
load("long_calc/ConditionxBet.Rda")
AllData$Conf = as.numeric(as.character(AllData$Conf))
AllData$RT = as.numeric(as.character(AllData$RT))
AllData$CatDiff = abs(50 - AllData$Cat_n)*2
AllData$ChoiceF = factor(AllData$Choice)
if (redo_calc){
##  MotConRT ##
resMotConRT = lmer(log(RT) ~ MotCon + CatDiff + (MotCon + CatDiff | Sub), AllData, control =lmerControl(calc.derivs = FALSE))
resMotConRT_Face = lmer(log(RT) ~ Want2See + CatDiff + (Want2See + CatDiff | Sub), subset(AllData, ChoiceF == "0"), control = lmerControl(calc.derivs = FALSE))
resMotConRT_Scene = lmer(log(RT) ~ Want2See + CatDiff + (Want2See + CatDiff | Sub), subset(AllData, ChoiceF == "1"), control =lmerControl(calc.derivs = FALSE))
## Condition Differences ##
resCondRT = lmer(log(RT) ~ CatDiff + Con + (Con + CatDiff |Sub), AllData, control =lmerControl(calc.derivs = FALSE))
resCondResponseRT = lmer(log(RT) ~ CatDiff + Con * Choice + (Con *  Choice + CatDiff|Sub), AllData, control =lmerControl(calc.derivs = FALSE))
resCondMotRT = lmer(log(RT) ~ CatDiff + Con * Want2See * Choice + (Con * Want2See * Choice + CatDiff|Sub), AllData, control =lmerControl(calc.derivs = FALSE))
sum_resCondMotRT = summary(resCondMotRT)
save(resMotConRT, resMotConRT_Face, resMotConRT_Scene, resCondRT, resCondMotRT, sum_resCondMotRT, resCondResponseRT, file="long_calc/RTMot.Rda")
}else{
load("long_calc/RTMot.Rda")
}
# MotConRT
summary(resMotConRT)
# MotConRT_Face
summary(resMotConRT_Face)
# MotConRT_Scene
summary(resMotConRT_Scene)
# Main effect of Condition on RT
summary(resCondRT)
# Interaction effect of Condition x Response on RT
summary(resCondResponseRT)
# Interaction effect of Condition X Want2See X Response on RT
sum_resCondMotRT
# Summarize real data
summRT = subset(AllData, !is.na(Conf)) %>%
group_by(Sub, Want2See, ChoiceF, Cat_n) %>%
summarise(meanRT = mean(RT))
summRT$CatDiff = abs(50 - summRT$Cat_n)*2
summary(lmer(meanRT ~ Want2See * ChoiceF + CatDiff + (Want2See * ChoiceF + CatDiff|Sub), summRT))
# Summarize real data
summRT = subset(AllData, !is.na(Conf)) %>%
group_by(Sub, Want2See, ChoiceF, Cat_n) %>%
summarise(meanRT = mean(RT))
summRT$CatDiff = abs(50 - summRT$Cat_n)*2
# Summarize simulated data
if (1){
sim_data = NULL
for (it in 1:1000){
this_sim = read.csv(paste0("data/model_outputs/simulations/simRT/sim",it,".csv"))
sim_data = rbind(sim_data, this_sim)
}
colnames(sim_data) = c('X','RT','Choice','Sub','Want2See','Cat_n')
sim_data$ChoiceF = factor(sim_data$Choice)
sim_data$Want2See = (sim_data$Want2See + 1) / 2
sim_data$Want2See = factor(sim_data$Want2See)
summRT_sim = sim_data %>%
group_by(Sub, Want2See, ChoiceF, Cat_n) %>%
summarise(meanRT = mean(RT))
save(summRT_sim, file="long_calc/summRT_sim.Rda")
} else{
load("long_calc/summRT_sim.Rda")
}
# Summarize real data
summRT = subset(AllData, !is.na(Conf)) %>%
group_by(Sub, Want2See, ChoiceF, Cat_n) %>%
summarise(meanRT = mean(RT))
summRT$CatDiff = abs(50 - summRT$Cat_n)*2
# Summarize simulated data
if (1){
sim_data = NULL
for (it in 1:1000){
this_sim = read.csv(paste0("../data/model_outputs/simulations/simRT/sim",it,".csv"))
sim_data = rbind(sim_data, this_sim)
}
colnames(sim_data) = c('X','RT','Choice','Sub','Want2See','Cat_n')
sim_data$ChoiceF = factor(sim_data$Choice)
sim_data$Want2See = (sim_data$Want2See + 1) / 2
sim_data$Want2See = factor(sim_data$Want2See)
summRT_sim = sim_data %>%
group_by(Sub, Want2See, ChoiceF, Cat_n) %>%
summarise(meanRT = mean(RT))
save(summRT_sim, file="long_calc/summRT_sim.Rda")
} else{
load("long_calc/summRT_sim.Rda")
}
# Clear workspace
rm(list = ls())
# Load helper functions
source('helper_functions.R')
# Import libraries
packages = c("tidyr","dplyr","ggplot2","lme4","lmerTest","Hmisc","car","lmtest","Rarity","cowplot")
ipak(packages)
# Redo long calculations
redo_calc = 1;
## Load in Striatum Betas
featquery_res = read.csv("../data/roi_zstat.csv")
featquery_res$Sub = as.factor(featquery_res$Sub)
## Load in individual subject parameters
full.model.subj_parm = read.csv("../data/model_outputs/subject_parms/simpleFull_subjparms.csv")
# Read data
AllData = read.csv("../data/AllData.csv")
# Convert to factors
AllData$Sub = as.factor(AllData$Sub)
AllData$Pred = as.factor(AllData$Pred)
AllData$Want2See = as.factor(AllData$Want2See)
AllData$Con_Rev = factor(AllData$Con, levels = c('Coop','Comp'))
AllData_ValidTrials = filter(AllData, !(is.na(Choice)))
# Load psychometric results (see Fig. 2 code)
load("long_calc/ConditionxBet.Rda")
# Extract random slope of the interaction
intSlope = unlist(coef(res)$Sub$`ConCoop:Pred1`)
# Create datafrom for each subjec'ts bias, and order in descending order
SubBias_Striatum = as.data.frame(intSlope)
SubBias_Striatum$Sub = unique(AllData$Sub)
PE = select(featquery_res, Sub, accumbens)
SubBias_Striatum = left_join(SubBias_Striatum ,PE) %>%
select(Sub,intSlope,accumbens)
# Median Split
SubBias_Striatum$medianBehav = SubBias_Striatum$intSlope >
median(SubBias_Striatum$intSlope)
SubBias_Striatum$medianBehav = factor(SubBias_Striatum$medianBehav, levels = c("TRUE", "FALSE"))
full.model.subj_parm$Sub = as.factor(full.model.subj_parm$Sub)
full.model.subj_parm = left_join(full.model.subj_parm,SubBias_Striatum)
# Calculate Neural Bias
NeuralBias = NULL
for (s in unique(AllData$Sub)){
thisData = NULL
this_res = lm(Prob ~ Cat_n + Con * Pred, data = subset(AllData_ValidTrials, Sub == s))
this_coef = coef(this_res)["ConCoop:Pred1"]
thisData$NeuralBias = this_coef
NeuralBias = rbind(NeuralBias,thisData)
}
NeuralBias = as.numeric(NeuralBias)
# Add Neural Bias
full.model.subj_parm$NeuralBias = NeuralBias
# Run GLM
lm.NAcc = summary(lm(scale(accumbens) ~ scale(z) + scale(drift_bias), full.model.subj_parm))
lm.NAcc
lm.NAcc.coef = lm.NAcc$coefficients
# Extract coefficents
reg_coef = NULL
reg_coef$parm = c('z_bias','v_bias')
reg_coef$value = c(lm.NAcc.coef["scale(z)","Estimate"],lm.NAcc.coef["scale(drift_bias)","Estimate"])
reg_coef$SE = c(lm.NAcc.coef["scale(z)","Std. Error"],lm.NAcc.coef["scale(drift_bias)","Std. Error"])
reg_coef = as.data.frame(reg_coef)
reg_coef$parm = factor(reg_coef$parm, levels = c('z_bias','v_bias'))
# NAcc ~ Z bias + V Bias
plot.A = ggplot(reg_coef) +
geom_bar(aes(x = parm, y = value), stat = "identity", width = 0.3) +
geom_errorbar(aes(x = parm, ymin = value - SE, ymax = value + SE), stat = "identity", width = 0.1) +
theme(axis.text.x  = element_text(size=10,color="black"),
axis.text.y  = element_text(size=10,color="black"),
axis.title.x = element_blank(),
axis.title.y = element_text(size=10),
strip.text.x = element_text(face = "bold", size = 10)) +
ylab("Estimate") +
coord_cartesian(ylim=c(-0.2, 0.82)) +
scale_y_continuous(breaks = seq(-0.25, 0.75, 0.25))
plot.A
# Load NAcc Timecourse
NAcc_tc = read.csv('../../../data/NAcc_timecourse.csv')
# Load NAcc Timecourse
NAcc_tc = read.csv('../data/NAcc_timecourse.csv')
NAcc_tc$Sub = as.factor(NAcc_tc$Sub)
NAcc_tc$MotCon = as.factor(NAcc_tc$MotCon)
NAcc_tc = left_join(NAcc_tc,SubBias_Striatum)
NAcc_tc_summary = group_by(NAcc_tc,MotCon,Time) %>%
summarise(meanActivity = mean(Activity), se = sem(Activity))
# Convert TR to seconds
NAcc_tc_summary$Time = NAcc_tc_summary$Time * 2
# Plot NAcc Timecourse for High Bias subjects
plot.B = ggplot(subset(NAcc_tc_summary),
aes(x=Time, y=meanActivity, linetype=MotCon)) +
geom_line(size = 1) +
theme(legend.position="none",
axis.text.x  = element_text(size=10,color="black"),
axis.text.y  = element_text(size=10,color="black"),
axis.title.x = element_blank(),
axis.title.y = element_text(size=10),
strip.text.x = element_blank()) +
geom_errorbar(aes(ymin=meanActivity-se, ymax=meanActivity+se), width=.3) +
coord_cartesian(ylim=c(-0.12, 0.20)) +
scale_x_continuous(breaks=seq(-8,8,2)) +
xlab("Time (s)") + ylab("NAcc Activity")
NAcc_tc_diff =
spread(NAcc_tc,MotCon,Activity) %>%
mutate(diff = `1` - `2`)
NAcc_diff_summary = group_by(NAcc_tc_diff,Time) %>%
summarise(meanDiff = mean(diff), se = sem(diff))
NAcc_diff_summary$Time = NAcc_diff_summary$Time * 2
plot.C = ggplot(NAcc_diff_summary,
aes(x=Time, y=meanDiff)) +
geom_line(size = 1) +
theme(legend.position="none",
axis.text.x  = element_text(size=10,color="black"),
axis.text.y  = element_text(size=10,color="black"),
axis.title.x = element_blank(),
axis.title.y = element_text(size=10),
strip.text.x = element_blank()) +
geom_errorbar(aes(ymin=meanDiff-se, ymax=meanDiff+se), width=.3) +
coord_cartesian(ylim=c(-0.12, 0.20)) +
scale_x_continuous(breaks=seq(-8,8,2)) +
xlab("Time (s)") + ylab("Difference")
plot_grid(plot.A, plot.B, plot.C, labels = c("A","B","C"), rel_widths = c(0.24, 0.38, 0.38), nrow = 1)
# Clear workspace
rm(list = ls())
# Load helper functions
source('helper_functions.R')
# Import libraries
packages = c("tidyr","dplyr","ggplot2","lme4","lmerTest","Hmisc","car","lmtest","Rarity","cowplot")
ipak(packages)
# Redo long calculations
redo_calc = 0;
# Read data
AllData = read.csv("../data/AllData.csv")
# Convert to factors
AllData$Sub = as.factor(AllData$Sub)
AllData$Pred = as.factor(AllData$Pred)
AllData$Want2See = as.factor(AllData$Want2See)
AllData$Con_Rev = factor(AllData$Con, levels = c('Coop','Comp'))
# Load psychometric results (see Fig. 2 code)
load("long_calc/ConditionxBet.Rda")
# Extract random slope of the interaction
intSlope = unlist(coef(res)$Sub$`ConCoop:Pred1`)
# Create datafrom for each subject's bias, and order in descending order
SubBias = as.data.frame(intSlope)
SubBias$Sub = unique(AllData$Sub)
SubBias = SubBias[order(-SubBias$intSlope), ]
# Clear workspace
rm(list = ls())
# Load helper functions
source('../../helper_functions.R')
# Clear workspace
rm(list = ls())
# Load helper functions
source('helper_functions.R')
# Import libraries
packages = c("tidyr","dplyr","ggplot2","lme4","lmerTest","Hmisc","car","lmtest","Rarity","cowplot","caret")
ipak(packages)
# Redo long calculations
redo_calc = 1;
tabulate_freq = function(true_model, true_label){
# Load in file
raw_dic = read.csv(paste0('../data/model_outputs/simulations/model_recovery/',true_model,'.csv'))[,2:4]
# Get rid of NAs
raw_dic = filter(raw_dic, !is.na(raw_dic$SimpleFull))
# Find recovered model
raw_dic$Recovered = unlist(apply(raw_dic,1,which.min))
raw_dic$Recovered = dplyr::recode(raw_dic$Recovered,
`1` = "z & v",
`2` = "z",
`3` = "v")
# Count percentage
model_summary = group_by(raw_dic,Recovered) %>%
summarise(n = n()) %>%
mutate(freq = n/sum(n) * 100)
model_summary$True = true_label
return(model_summary)
}

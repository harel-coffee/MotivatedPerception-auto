SubBias = as.data.frame(intSlope)
SubBias$Sub = unique(AllData$Sub)
SubBias$medianBehave = factor(ifelse(SubBias$intSlope > median(SubBias$intSlope), "HighBias", "LowBias"))
BiasedData =  subset(AllData_ValidTrials, Sub %in% SubBias$Sub[SubBias$medianBehav == "TRUE"])
UnbiasedData = subset(AllData_ValidTrials, Sub %in% SubBias$Sub[SubBias$medianBehav == "FALSE"])
AllData_ValidTrials = full_join(AllData_ValidTrials, SubBias)
# Read data
AllData = read.csv("../data/AllData.csv")
# Convert to factors
AllData$Sub = as.factor(AllData$Sub)
AllData$Pred = as.factor(AllData$Pred)
AllData$Want2See = as.factor(AllData$Want2See)
AllData$Con_Rev = factor(AllData$Con, levels = c('Coop','Comp'))
AllData_ValidTrials = filter(AllData, !(is.na(Choice)))
# Load psychometric results (see Fig. 2 code)
load("long_calc/ConditionxBet.Rda")
## Median split participants
intSlope = unlist(coef(res)$Sub$`ConCoop:Pred1`)
SubBias = as.data.frame(intSlope)
SubBias$Sub = unique(AllData$Sub)
SubBias$medianBehave == SubBias$intSlope > median(SubBias$intSlope)
BiasedData =  subset(AllData_ValidTrials, Sub %in% SubBias$Sub[SubBias$medianBehav == "TRUE"])
UnbiasedData = subset(AllData_ValidTrials, Sub %in% SubBias$Sub[SubBias$medianBehav == "FALSE"])
AllData_ValidTrials = full_join(AllData_ValidTrials, SubBias)
# Read data
AllData = read.csv("../data/AllData.csv")
# Convert to factors
AllData$Sub = as.factor(AllData$Sub)
AllData$Pred = as.factor(AllData$Pred)
AllData$Want2See = as.factor(AllData$Want2See)
AllData$Con_Rev = factor(AllData$Con, levels = c('Coop','Comp'))
AllData_ValidTrials = filter(AllData, !(is.na(Choice)))
# Load psychometric results (see Fig. 2 code)
load("long_calc/ConditionxBet.Rda")
## Median split participants
intSlope = unlist(coef(res)$Sub$`ConCoop:Pred1`)
SubBias = as.data.frame(intSlope)
SubBias$Sub = unique(AllData$Sub)
SubBias$medianBehave = SubBias$intSlope > median(SubBias$intSlope)
BiasedData =  subset(AllData_ValidTrials, Sub %in% SubBias$Sub[SubBias$medianBehav == "TRUE"])
UnbiasedData = subset(AllData_ValidTrials, Sub %in% SubBias$Sub[SubBias$medianBehav == "FALSE"])
AllData_ValidTrials = full_join(AllData_ValidTrials, SubBias)
res.int = lmer(Prob ~ Cat_n + Con * Pred * medianBehav + (Con * Pred |Sub), UnbiasedData)
res.int = lmer(Prob ~ Cat_n + Con * Pred * medianBehave + (Con * Pred |Sub), UnbiasedData)
res.int = lmer(Prob ~ Cat_n + Con * Pred * medianBehave + (Con * Pred |Sub), AllData_ValidTrials)
M14 = summary(res.prob.unbias)$coefficients
summary(res.int)
M14 = summary(res.int)$coefficients
View(M14)
# Clear workspace
rm(list = ls())
# Load helper functions
source('helper_functions.R')
# Import libraries
packages = c("tidyr","dplyr","ggplot2","lme4","lmerTest","Hmisc","car","lmtest","Rarity","cowplot","caret")
ipak(packages)
# Redo long calculations
redo_calc = 1;
tabulate_freq = function(true_model, true_label){
# Load in file
raw_dic = read.csv(paste0('../data/model_outputs/simulations/model_recovery/',true_model,'.csv'))[,2:4]
# Get rid of NAs
raw_dic = filter(raw_dic, !is.na(raw_dic$SimpleFull))
# Find recovered model
raw_dic$Recovered = unlist(apply(raw_dic,1,which.min))
raw_dic$Recovered = dplyr::recode(raw_dic$Recovered,
`1` = "z & v",
`2` = "z",
`3` = "v")
# Count percentage
model_summary = group_by(raw_dic,Recovered) %>%
summarise(n = n()) %>%
mutate(freq = n/sum(n) * 100)
model_summary$True = true_label
return(model_summary)
}
SimpleFull_summary = tabulate_freq('SimpleFull','z & v')
SimpleBias_summary = tabulate_freq('SimpleBias','z')
SimpleDrift_summary = tabulate_freq('SimpleDrift','v')
SimpleNullsummary = tabulate_freq('SimpleNull','v')
model_recovery = rbind(SimpleFull_summary, SimpleBias_summary, SimpleDrift_summary)
model_recovery$True = factor(model_recovery$True, levels = c('v', 'z', 'z & v'))
model_recovery$Recovered = factor(model_recovery$Recovered, levels = c('z & v', 'z', 'v'))
# fill in the empty cells
cell1 = data.frame(True = 'z', Recovered = 'v', n = 0, freq = 0)
cell2 = data.frame(True = 'v', Recovered = 'z', n = 0, freq = 0)
cell3 = data.frame(True = 'z & v', Recovered = 'z', n = 0, freq = 0)
model_recovery = rbind(model_recovery, cell1, cell2, cell3)
top.plot = ggplot(model_recovery, aes(x=Recovered, y=True, fill = freq)) +
geom_tile(color="black",size=0.1) +   # draw tile
geom_tile(aes(x=Recovered,y=True),
data=subset(model_recovery, as.character(True)==as.character(Recovered)),
color="black",size=1, fill="black", alpha=0) + # highlight diagonal
geom_text(aes(label = sprintf("%.0f", freq)), size = 7, colour = "white") + # add text
labs(x="Recovered Model",y ="True Model")
model_recovery = rbind(SimpleFull_summary, SimpleBias_summary, SimpleDrift_summary, SimpleNull_summary)
SimpleFull_summary = tabulate_freq('SimpleFull','z & v')
SimpleBias_summary = tabulate_freq('SimpleBias','z')
SimpleDrift_summary = tabulate_freq('SimpleDrift','v')
SimpleNullsummary = tabulate_freq('SimpleNull','v')
model_recovery = rbind(SimpleFull_summary, SimpleBias_summary, SimpleDrift_summary, SimpleNull_summary)
SimpleNullsummary = tabulate_freq('SimpleNull','null')
model_recovery = rbind(SimpleFull_summary, SimpleBias_summary, SimpleDrift_summary, SimpleNull_summary)
SimpleFull_summary = tabulate_freq('SimpleFull','z & v')
SimpleBias_summary = tabulate_freq('SimpleBias','z')
SimpleDrift_summary = tabulate_freq('SimpleDrift','v')
SimpleNull_summary = tabulate_freq('SimpleNull','null')
model_recovery = rbind(SimpleFull_summary, SimpleBias_summary, SimpleDrift_summary, SimpleNull_summary)
View(model_recovery)
tabulate_freq = function(true_model, true_label){
# Load in file
raw_dic = read.csv(paste0('../data/model_outputs/simulations/model_recovery/',true_model,'.csv'))[,2:4]
# Get rid of NAs
raw_dic = filter(raw_dic, !is.na(raw_dic$SimpleFull))
# Find recovered model
raw_dic$Recovered = unlist(apply(raw_dic,1,which.min))
raw_dic$Recovered = dplyr::recode(raw_dic$Recovered,
`1` = "z & v",
`2` = "z",
`3` = "v",
`4` = "null")
# Count percentage
model_summary = group_by(raw_dic,Recovered) %>%
summarise(n = n()) %>%
mutate(freq = n/sum(n) * 100)
model_summary$True = true_label
return(model_summary)
}
SimpleFull_summary = tabulate_freq('SimpleFull','z & v')
SimpleBias_summary = tabulate_freq('SimpleBias','z')
SimpleDrift_summary = tabulate_freq('SimpleDrift','v')
SimpleNull_summary = tabulate_freq('SimpleNull','null')
model_recovery = rbind(SimpleFull_summary, SimpleBias_summary, SimpleDrift_summary, SimpleNull_summary)
model_recovery$True = factor(model_recovery$True, levels = c('v', 'z', 'z & v','null'))
model_recovery$Recovered = factor(model_recovery$Recovered, levels = c('z & v', 'z', 'v','null'))
View(model_recovery)
tabulate_freq = function(true_model, true_label){
# Load in file
raw_dic = read.csv(paste0('../data/model_outputs/simulations/model_recovery/',true_model,'.csv'))[,2:4]
# Get rid of NAs
raw_dic = filter(raw_dic, !is.na(raw_dic$SimpleFull))
# Find recovered model
raw_dic$Recovered = unlist(apply(raw_dic,1,which.min))
raw_dic$Recovered = dplyr::recode(raw_dic$Recovered,
`1` = "z & v",
`2` = "z",
`3` = "v",
`4` = "null")
# Count percentage
model_summary = group_by(raw_dic,Recovered) %>%
summarise(n = n()) %>%
mutate(freq = n/sum(n) * 100)
model_summary$True = true_label
return(model_summary)
}
SimpleFull_summary = tabulate_freq('SimpleFull','z & v')
SimpleBias_summary = tabulate_freq('SimpleBias','z')
SimpleDrift_summary = tabulate_freq('SimpleDrift','v')
SimpleNull_summary = tabulate_freq('SimpleNull','null')
model_recovery = rbind(SimpleFull_summary, SimpleBias_summary, SimpleDrift_summary, SimpleNull_summary)
View(model_recovery)
37+52+11
SimpleNull_summary = tabulate_freq('SimpleNull','null')
View(SimpleNullsummary)
tabulate_freq = function(true_model, true_label){
# Load in file
raw_dic = read.csv(paste0('../data/model_outputs/simulations/model_recovery/',true_model,'.csv'))[,2:5]
# Get rid of NAs
raw_dic = filter(raw_dic, !is.na(raw_dic$SimpleFull))
# Find recovered model
raw_dic$Recovered = unlist(apply(raw_dic,1,which.min))
raw_dic$Recovered = dplyr::recode(raw_dic$Recovered,
`1` = "z & v",
`2` = "z",
`3` = "v",
`4` = "null")
# Count percentage
model_summary = group_by(raw_dic,Recovered) %>%
summarise(n = n()) %>%
mutate(freq = n/sum(n) * 100)
model_summary$True = true_label
return(model_summary)
}
SimpleFull_summary = tabulate_freq('SimpleFull','z & v')
SimpleBias_summary = tabulate_freq('SimpleBias','z')
SimpleDrift_summary = tabulate_freq('SimpleDrift','v')
SimpleNull_summary = tabulate_freq('SimpleNull','null')
model_recovery = rbind(SimpleFull_summary, SimpleBias_summary, SimpleDrift_summary, SimpleNull_summary)
model_recovery$True = factor(model_recovery$True, levels = c('v', 'z', 'z & v','null'))
model_recovery$Recovered = factor(model_recovery$Recovered, levels = c('z & v', 'z', 'v','null'))
View(model_recovery)
View(model_recovery)
# fill in the empty cells
cell1 = data.frame(True = 'z', Recovered = 'v', n = 0, freq = 0)
cell2 = data.frame(True = 'v', Recovered = 'z', n = 0, freq = 0)
cell3 = data.frame(True = 'z & v', Recovered = 'z', n = 0, freq = 0)
model_recovery = rbind(model_recovery, cell1, cell2, cell3)
top.plot = ggplot(model_recovery, aes(x=Recovered, y=True, fill = freq)) +
geom_tile(color="black",size=0.1) +   # draw tile
geom_tile(aes(x=Recovered,y=True),
data=subset(model_recovery, as.character(True)==as.character(Recovered)),
color="black",size=1, fill="black", alpha=0) + # highlight diagonal
geom_text(aes(label = sprintf("%.0f", freq)), size = 7, colour = "white") + # add text
labs(x="Recovered Model",y ="True Model")
# Load in file
raw_dic = read.csv(paste0('../data/model_outputs/simulations/model_recovery/','SimpleFull','.csv'))[,2:5]
# Get rid of NAs
SimpleFull = filter(raw_dic, !is.na(raw_dic$SimpleFull))
# Load in file
raw_dic = read.csv(paste0('../data/model_outputs/simulations/model_recovery/','SimpleBias','.csv'))[,2:5]
# Get rid of NAs
SimpleBias = filter(raw_dic, !is.na(raw_dic$SimpleFull))
# Load in file
raw_dic = read.csv(paste0('../data/model_outputs/simulations/model_recovery/','SimpleDrift','.csv'))[,2:5]
# Get rid of NAs
SimpleDrift = filter(raw_dic, !is.na(raw_dic$SimpleFull))
# Load in file
raw_dic = read.csv(paste0('../data/model_outputs/simulations/model_recovery/','SimpleNull','.csv'))[,2:5]
# Get rid of NAs
SimpleNull = filter(raw_dic, !is.na(raw_dic$SimpleFull))
# full_bias
full_bias = SimpleFull$SimpleFull - SimpleFull$SimpleBias
plot.a = ggplot(data_frame(full_bias), aes(x = full_bias)) +
geom_histogram() +
geom_vline(xintercept = 0, size = 1, linetype = 'dashed') +
ggtitle("z & v vs. z") +
xlab("DIC Difference") +
geom_point(aes(x = -84, y = 14), shape = 25, fill="black", size = 1.5) +
coord_cartesian(xlim = c(-150,30), ylim = c(0,14)) +
scale_y_continuous(breaks = seq(0,12,4))
# bias_full
bias_full = SimpleBias$SimpleFull - SimpleBias$SimpleBias
plot.b = ggplot(data_frame(bias_full), aes(x = bias_full)) +
geom_histogram() +
geom_vline(xintercept = 0, size = 1, linetype = 'dashed') +
ggtitle("z & v vs. z") +
xlab("DIC Difference") +
coord_cartesian(xlim = c(-12,10), ylim = c(0,14)) +
scale_y_continuous(breaks = seq(0,12,4))
# full_drift
full_drift = SimpleFull$SimpleFull - SimpleFull$SimpleDrift
plot.c = ggplot(data_frame(full_drift), aes(x = full_drift)) +
geom_histogram() +
geom_vline(xintercept = 0, size = 1, linetype = 'dashed') +
ggtitle("z & v vs. v") +
xlab("DIC Difference") +
geom_point(aes(x = -11, y = 8.5), shape = 25, fill="black", size = 1.5) +
coord_cartesian(xlim = c(-30,12))
# drift_full
drift_full = SimpleDrift$SimpleFull - SimpleDrift$SimpleDrift
plot.d = ggplot(data_frame(drift_full), aes(x = drift_full)) +
geom_histogram() +
geom_vline(xintercept = 0, size = 1, linetype = 'dashed') +
ggtitle("z & v vs. v") +
xlab("DIC Difference") +
geom_point(aes(x = -11, y = 16), shape = 25, fill="black", size = 1.5) +
coord_cartesian(xlim = c(-13,12)) +
scale_y_continuous(breaks = seq(0,16,4))
bottom.plot = plot_grid(plot.a, plot.b, plot.c, plot.d, nrow = 2)
plot_grid(top.plot, bottom.plot, nrow = 2, labels = c("A", "B"))
# Clear workspace
rm(list = ls())
# Load helper functions
source('helper_functions.R')
# Import libraries
packages = c("tidyr","dplyr","ggplot2","lme4","lmerTest","Hmisc","car","lmtest","Rarity","cowplot","caret")
ipak(packages)
# Redo long calculations
redo_calc = 1;
tabulate_freq = function(true_model, true_label){
# Load in file
raw_dic = read.csv(paste0('../data/model_outputs/simulations/model_recovery/',true_model,'.csv'))[,2:5]
# Get rid of NAs
raw_dic = filter(raw_dic, !is.na(raw_dic$SimpleFull))
# Find recovered model
raw_dic$Recovered = unlist(apply(raw_dic,1,which.min))
raw_dic$Recovered = dplyr::recode(raw_dic$Recovered,
`1` = "z & v",
`2` = "z",
`3` = "v",
`4` = "null")
# Count percentage
model_summary = group_by(raw_dic,Recovered) %>%
summarise(n = n()) %>%
mutate(freq = n/sum(n) * 100)
model_summary$True = true_label
return(model_summary)
}
SimpleFull_summary = tabulate_freq('SimpleFull','z & v')
SimpleBias_summary = tabulate_freq('SimpleBias','z')
SimpleDrift_summary = tabulate_freq('SimpleDrift','v')
SimpleNull_summary = tabulate_freq('SimpleNull','null')
model_recovery = rbind(SimpleFull_summary, SimpleBias_summary, SimpleDrift_summary, SimpleNull_summary)
model_recovery$True = factor(model_recovery$True, levels = c('null', 'v', 'z', 'z & v'))
model_recovery$Recovered = factor(model_recovery$Recovered, levels = c('z & v', 'z', 'v','null'))
# fill in the empty cells
cell1 = data.frame(True = 'z', Recovered = 'v', n = 0, freq = 0)
cell2 = data.frame(True = 'v', Recovered = 'z', n = 0, freq = 0)
cell3 = data.frame(True = 'z & v', Recovered = 'z', n = 0, freq = 0)
cell4 = data.frame(Recovered = 'null', True = 'z & v', n = 0, freq = 0)
cell5 = data.frame(Recovered = 'null', True = 'z', n = 0, freq = 0)
cell6 = data.frame(Recovered = 'null', True = 'v', n = 0, freq = 0)
model_recovery = rbind(model_recovery, cell1, cell2, cell3, cell4, cell5, cell6)
top.plot = ggplot(model_recovery, aes(x=Recovered, y=True, fill = freq)) +
geom_tile(color="black",size=0.1) +   # draw tile
geom_tile(aes(x=Recovered,y=True),
data=subset(model_recovery, as.character(True)==as.character(Recovered)),
color="black",size=1, fill="black", alpha=0) + # highlight diagonal
geom_text(aes(label = sprintf("%.0f", freq)), size = 7, colour = "white") + # add text
labs(x="Recovered Model",y ="True Model") #+
#theme(legend.position="none")
# Load in file
raw_dic = read.csv(paste0('../data/model_outputs/simulations/model_recovery/','SimpleFull','.csv'))[,2:5]
# Get rid of NAs
SimpleFull = filter(raw_dic, !is.na(raw_dic$SimpleFull))
# Load in file
raw_dic = read.csv(paste0('../data/model_outputs/simulations/model_recovery/','SimpleBias','.csv'))[,2:5]
# Get rid of NAs
SimpleBias = filter(raw_dic, !is.na(raw_dic$SimpleFull))
# Load in file
raw_dic = read.csv(paste0('../data/model_outputs/simulations/model_recovery/','SimpleDrift','.csv'))[,2:5]
# Get rid of NAs
SimpleDrift = filter(raw_dic, !is.na(raw_dic$SimpleFull))
# Load in file
raw_dic = read.csv(paste0('../data/model_outputs/simulations/model_recovery/','SimpleNull','.csv'))[,2:5]
# Get rid of NAs
SimpleNull = filter(raw_dic, !is.na(raw_dic$SimpleFull))
# full_bias
full_bias = SimpleFull$SimpleFull - SimpleFull$SimpleBias
plot.a = ggplot(data_frame(full_bias), aes(x = full_bias)) +
geom_histogram() +
geom_vline(xintercept = 0, size = 1, linetype = 'dashed') +
ggtitle("z & v vs. z") +
xlab("DIC Difference") +
geom_point(aes(x = -84, y = 14), shape = 25, fill="black", size = 1.5) +
coord_cartesian(xlim = c(-150,30), ylim = c(0,14)) +
scale_y_continuous(breaks = seq(0,12,4))
# bias_full
bias_full = SimpleBias$SimpleFull - SimpleBias$SimpleBias
plot.b = ggplot(data_frame(bias_full), aes(x = bias_full)) +
geom_histogram() +
geom_vline(xintercept = 0, size = 1, linetype = 'dashed') +
ggtitle("z & v vs. z") +
xlab("DIC Difference") +
coord_cartesian(xlim = c(-12,10), ylim = c(0,14)) +
scale_y_continuous(breaks = seq(0,12,4))
# full_drift
full_drift = SimpleFull$SimpleFull - SimpleFull$SimpleDrift
plot.c = ggplot(data_frame(full_drift), aes(x = full_drift)) +
geom_histogram() +
geom_vline(xintercept = 0, size = 1, linetype = 'dashed') +
ggtitle("z & v vs. v") +
xlab("DIC Difference") +
geom_point(aes(x = -11, y = 10), shape = 25, fill="black", size = 1.5) +
coord_cartesian(xlim = c(-35,8)) +
scale_y_continuous(breaks = seq(0,10,2))
# drift_full
drift_full = SimpleDrift$SimpleFull - SimpleDrift$SimpleDrift
plot.d = ggplot(data_frame(drift_full), aes(x = drift_full)) +
geom_histogram() +
geom_vline(xintercept = 0, size = 1, linetype = 'dashed') +
ggtitle("z & v vs. v") +
xlab("DIC Difference") +
geom_point(aes(x = -11, y = 16), shape = 25, fill="black", size = 1.5) +
coord_cartesian(xlim = c(-13,12)) +
scale_y_continuous(breaks = seq(0,16,4))
# full_null
full_null = SimpleFull$SimpleFull - SimpleFull$SimpleNull
plot.e = ggplot(data_frame(full_null), aes(x = full_null)) +
geom_histogram() +
geom_vline(xintercept = 0, size = 1, linetype = 'dashed') +
ggtitle("z & v vs. null") +
xlab("DIC Difference") +
geom_point(aes(x = -200, y = 14), shape = 25, fill="black", size = 1.5) +
coord_cartesian(xlim = c(-250,50), ylim = c(0,14)) +
scale_y_continuous(breaks = seq(0,12,4))
# null_full
null_full = SimpleNull$SimpleFull - SimpleNull$SimpleNull
plot.f = ggplot(data_frame(null_full), aes(x = null_full)) +
geom_histogram() +
geom_vline(xintercept = 0, size = 1, linetype = 'dashed') +
ggtitle("z & v vs. null") +
xlab("DIC Difference") +
coord_cartesian(xlim = c(-13,12)) +
scale_y_continuous(breaks = seq(0,10,2))
bottom.plot = plot_grid(plot.a, plot.b, plot.c, plot.d, plot.e, plot.f, nrow = 3)
plot_grid(top.plot, bottom.plot, nrow = 2, labels = c("A", "B"), rel_heights = c(0.45,0.55))
View(model_recovery)
View(model_recovery)
# Clear workspace
rm(list = ls())
# Load helper functions
source('helper_functions.R')
# Import libraries
packages = c("tidyr","dplyr","ggplot2","lme4","lmerTest","Hmisc","car","lmtest","Rarity","cowplot")
ipak(packages)
# Redo long calculations
redo_calc = 0;
# Read data
AllData = read.csv("../data/AllData.csv")
# Convert to factors
AllData$Sub = as.factor(AllData$Sub)
AllData$Pred = as.factor(AllData$Pred)
AllData$Want2See = as.factor(AllData$Want2See)
AllData$Con_Rev = factor(AllData$Con, levels = c('Coop','Comp'))
AllData_ValidTrials = filter(AllData, !(is.na(Choice)))
# Load psychometric results (see Fig. 2 code)
load("long_calc/ConditionxBet.Rda")
AllData$Conf = as.numeric(as.character(AllData$Conf))
AllData$RT = as.numeric(as.character(AllData$RT))
AllData$CatDiff = abs(50 - AllData$Cat_n)*2
AllData$ChoiceF = factor(AllData$Choice)
if (redo_calc){
##  MotConRT ##
resMotConRT = lmer(log(RT) ~ MotCon + CatDiff + (MotCon + CatDiff | Sub), AllData, control =lmerControl(calc.derivs = FALSE))
resMotConRT_Face = lmer(log(RT) ~ Want2See + CatDiff + (Want2See + CatDiff | Sub), subset(AllData, ChoiceF == "0"), control = lmerControl(calc.derivs = FALSE))
resMotConRT_Scene = lmer(log(RT) ~ Want2See + CatDiff + (Want2See + CatDiff | Sub), subset(AllData, ChoiceF == "1"), control =lmerControl(calc.derivs = FALSE))
resMotConRT_direct = lmer(log(RT) ~ MotCon + CatDiff + (MotCon + CatDiff |Sub), AllData, control =lmerControl(calc.derivs = FALSE))
## Condition Differences ##
resCondRT = lmer(log(RT) ~ CatDiff + Con + (Con + CatDiff |Sub), AllData, control =lmerControl(calc.derivs = FALSE))
resCondResponseRT = lmer(log(RT) ~ CatDiff + Con * Choice + (Con *  Choice + CatDiff|Sub), AllData, control =lmerControl(calc.derivs = FALSE))
resCondMotRT = lmer(log(RT) ~ CatDiff + Con * Want2See * Choice + (Con * Want2See * Choice + CatDiff|Sub), AllData, control =lmerControl(calc.derivs = FALSE))
sum_resCondMotRT = summary(resCondMotRT)
save(resMotConRT, resMotConRT_direct, resMotConRT_Face, resMotConRT_Scene, resCondRT, resCondMotRT, sum_resCondMotRT, resCondResponseRT, file="long_calc/RTMot.Rda")
}else{
load("long_calc/RTMot.Rda")
}
# MotConRT
summary(resMotConRT_direct)
# MotConRT_Face
summary(resMotConRT_Face)
# MotConRT_Scene
summary(resMotConRT_Scene)
# Main effect of Condition on RT
summary(resCondRT)
# Interaction effect of Condition x Response on RT
summary(resCondResponseRT)
# Interaction effect of Condition X Want2See X Response on RT
sum_resCondMotRT
# Summarize simulated data
if (redo_calc){
sim_data = NULL
for (it in 1:1000){
this_sim = read.csv(paste0("../data/model_outputs/simulations/simRT/sim",it,".csv"))
sim_data = rbind(sim_data, this_sim)
}
colnames(sim_data) = c('X','RT','Choice','Sub','Want2See','Cat_n')
sim_data$ChoiceF = factor(sim_data$Choice)
sim_data$Want2See = (sim_data$Want2See + 1) / 2
sim_data$Want2See = factor(sim_data$Want2See)
summRT_sim = sim_data %>%
group_by(Sub, Want2See, ChoiceF, Cat_n) %>%
summarise(meanRT = mean(RT))
save(summRT_sim, file="long_calc/summRT_sim.Rda")
} else{
load("long_calc/summRT_sim.Rda")
}
# Summarize real data
summRT = subset(AllData, !is.na(Conf)) %>%
group_by(Sub, Want2See, ChoiceF, Cat_n) %>%
summarise(meanRT = mean(RT), nTrial = n())
summRT$CatDiff = abs(50 - summRT$Cat_n)*2
# Find subjects that have data for that data-point
# summRT_filtered = summRT %>%
#   filter(Cat_n == 55 & Want2See == 1 & ChoiceF == 0)
#
# summRT = summRT %>%
#   filter(Sub %in% summRT_filtered$Sub)
# summRT_sim = summRT_sim %>%
#   filter(Sub %in% summRT_filtered$Sub)
summRTmean = summRT %>%
group_by(Cat_n, Want2See, ChoiceF) %>%
dplyr::summarise(RT = mean(meanRT), se = sem(meanRT), nTrial = sum(nTrial), n = n())
summRTmean = filter(summRTmean, nTrial < 48)
# Plot
dataplot =
ggplot(summRTmean, aes(y = RT, x = Cat_n, color = Want2See)) +
geom_point(aes(size = nTrial)) +
#geom_point(size = 3.6) +
geom_errorbar(aes(ymin = RT - se, ymax = RT + se), width = 1) +
facet_wrap(~ ChoiceF) +
theme(axis.text.x  = element_text(size=14,color="black"),
axis.text.y  = element_text(size=14,color="black"),
axis.title.x = element_text(size=15),
axis.title.y = element_text(size=15),
strip.background = element_blank(),
legend.position="none") +
ylab("RT(s)") + xlab("% Scene") +
scale_colour_manual(values=myPalette) +
coord_cartesian(ylim = c(1,2.75))
simplot =
ggplot(summRT_sim,
aes(y = meanRT, x = Cat_n, color = Want2See)) +
stat_summary(fun.y=mean,geom="point", size = 3.6) +
stat_summary(fun.data = mean_cl_normal, fun.args = list(mult = 1), geom = "errorbar",width=1) +
facet_wrap(~ ChoiceF) +
theme(axis.text.x  = element_text(size=14,color="black"),
axis.text.y  = element_text(size=14,color="black"),
axis.title.x = element_text(size=15),
axis.title.y = element_text(size=15),
strip.background = element_blank(),
legend.position="none") +
scale_colour_manual(values=myPalette) +
ylab("RT(s)") + xlab("% Scene") +
coord_cartesian(ylim = c(1,2.5))
plot_grid(dataplot, simplot, nrow = 2)
View(summRTmean)
View(summRTmean)
summRTmean = summRT %>%
group_by(Cat_n, Want2See, ChoiceF) %>%
dplyr::summarise(RT = mean(meanRT), se = sem(meanRT), nTrial = sum(nTrial), n = n())
View(summRTmean)
